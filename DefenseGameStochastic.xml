<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>// === Game Parameters ===
const int WIDTH = 16;
const int HEIGHT = 8;
const int MAP_SIZE = WIDTH * HEIGHT;
const int LONGEST_PATH = 26;



// === Game variables ===
int enemy_cont = 0;

// === CHANNELS ===
broadcast chan attack;
broadcast chan movement;
broadcast chan turret_notify;
broadcast chan enemy_leave;
broadcast chan end_all;


// === Turrets Parameters ===

//Turrets
const int NUM_TURRETS = 7;

//Turrets Damage
const int SNIPER_ATK = 20;
const int CANNON_ATK = 5;
const int BASIC_ATK = 2;

//Turrets Range
const int SNIPER_RANGE = 4;
const int CANNON_RANGE = 1;
const int BASIC_RANGE = 2;

//Turrets Rate of Fire
const int SNIPER_ROF = 20;
const int CANNON_ROF = 7;
const int BASIC_ROF = 2;

//struct position
typedef struct {
    int x;
    int y;
} Position;

//Turrets state arrays;
typedef int[0, NUM_TURRETS-1] id_t;
broadcast chan shoot[id_t];

// === Configuration I ===
int ranges[id_t] = {SNIPER_RANGE, BASIC_RANGE, CANNON_RANGE, CANNON_RANGE, SNIPER_RANGE, CANNON_RANGE, CANNON_RANGE};
int rofs[id_t] = {SNIPER_ROF, BASIC_ROF, CANNON_ROF, CANNON_ROF, SNIPER_ROF, CANNON_ROF, CANNON_ROF};
int atks[id_t] = {SNIPER_ATK, BASIC_ATK, CANNON_ATK, CANNON_ATK, SNIPER_ATK, CANNON_ATK, CANNON_ATK};
/*
// === Configuration II ===
int ranges[id_t] = {BASIC_RANGE, BASIC_RANGE, CANNON_RANGE, CANNON_RANGE, SNIPER_RANGE, SNIPER_RANGE, SNIPER_RANGE};
int rofs[id_t] = {BASIC_ROF, BASIC_ROF, CANNON_ROF, CANNON_ROF, SNIPER_ROF, SNIPER_ROF, SNIPER_ROF};
int atks[id_t] = {BASIC_ATK, BASIC_ATK, CANNON_ATK, CANNON_ATK, SNIPER_ATK, SNIPER_ATK, SNIPER_ATK};

// === Configuration III ===
int ranges[id_t] = {BASIC_RANGE, BASIC_RANGE, CANNON_RANGE, CANNON_RANGE, SNIPER_RANGE, SNIPER_RANGE, SNIPER_RANGE};
int rofs[id_t] = {BASIC_ROF, BASIC_ROF, CANNON_ROF, CANNON_ROF, SNIPER_ROF, SNIPER_ROF, SNIPER_ROF};
int atks[id_t] = {BASIC_ATK, BASIC_ATK, CANNON_ATK, CANNON_ATK, SNIPER_ATK, SNIPER_ATK, SNIPER_ATK};
*/
const Position locations[id_t] = {{2,3}, {5,5}, {8,2}, {8,6}, {11,5}, {14,2}, {14,6}};

// === Enemies Parameters ===

// Enemies
const int NUM_CIRCLES = 400;
const int NUM_SQUARES = 300;
typedef int[0, NUM_CIRCLES-1] id_c;
typedef int[0, NUM_SQUARES-1] id_s;
const int num_enemy = NUM_CIRCLES + NUM_SQUARES;

//Enemies Speeds
const int CIRCLE_SPEED = 1;
const int SQUARE_SPEED = 3;

//Enemies Health
const int CIRCLE_HEALTH = 10;
const int SQUARE_HEALTH = 20;

//Enenmies Damage
const int CIRCLE_DAMAGE = 2;
const int SQUARE_DAMAGE = 4;

//Enenmies Spawning
const int CIRCLE_SPAWN_INTERVAL = 2;
const int SQUARE_SPAWN_INTERVAL = 3;

// Enemy position variables
int START_X = 0;
int START_Y = 0;

int sqrs_pos[NUM_SQUARES][2];
int circles_pos[NUM_CIRCLES][2];

// Main Tower
int mainTowerHP = 100;

// Enemy state arrays
int circle_health[NUM_CIRCLES];
bool circle_alive[NUM_CIRCLES];

int square_health[NUM_SQUARES];
bool square_alive[NUM_SQUARES];

//to save when the enemy instance has started
int activation_order[NUM_SQUARES+NUM_CIRCLES];
int activation_counter = 0;
// Clock for simulation
clock globalClock;



// Cell types
const int WALL = 0;
const int PATH = 1;
const int TURRET = 2;
const int ENTRY = 3;
const int MAIN = 4;
const int SQUARE = 5;
const int CIRCLE = 6;

// Main Tower position
const int MAIN_X = 15;
const int MAIN_Y = 4;

// Bifurcation points
const int BIFURCATION1_X = 7;
const int BIFURCATION1_Y = 4;
const int BIFURCATION2_X = 10;
const int BIFURCATION2_Y = 7;

int map[HEIGHT][WIDTH] = {
//x= 0     1     2       3     4     5       6     7       8       9     10    11      12    13    14      15
    {PATH, 0,    0,      0,    0,    0,      0,    0,      0,      0,    0,    0,      0,    0,    0,      0},    // y = 0
    {PATH, 0,    0,      0,    0,    0,      0,    PATH,   PATH,   PATH, PATH, PATH,   PATH, PATH, PATH,   PATH}, // y = 1
    {PATH, 0,    0,      0,    0,    0,      0,    PATH,   TURRET, 0,    0,    0,      0,    0,    TURRET, PATH}, // y = 2
    {PATH, 0,    TURRET, 0,    0,    0,      0,    PATH,   0,      0,    0,    0,      0,    0,    0,      PATH}, // y = 3
    {PATH, PATH, PATH,   PATH, PATH, PATH,   PATH, PATH,   0,      0,    PATH, PATH,   PATH, PATH, PATH,   PATH}, // y = 4
    {0,    0,    0,      0,    0,    TURRET, 0,    PATH,   0,      0,    PATH, TURRET, 0,    0,    0,      PATH}, // y = 5
    {0,    0,    0,      0,    0,    0,      0,    PATH,   TURRET, 0,    PATH, 0,      0,    0,    TURRET, PATH}, // y = 6
    {0,    0,    0,      0,    0,    0,      0,    PATH,   PATH,   PATH, PATH, PATH,   PATH, PATH, PATH,   PATH}  // y = 7
};

/*int id_inMap[HEIGHT][WIDTH] = {
//x= 0     1     2       3     4     5       6     7       8       9     10    11      12    13    14      15
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}, // y = 0
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}, // y = 1
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}, // y = 2
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}, // y = 3
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}, // y = 4
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}, // y = 5
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}, // y = 6
    {-1, -1,    -1,      -1,    -1,    -1,      -1,    -1,      -1,      -1,    -1,    -1,      -1,    -1,    -1,      -1}  // y = 7
};*/


//appling damage to the enemy target function
void apply_damage(int target_id, int dmg) {
    if (target_id &lt; NUM_SQUARES)
        square_health[target_id] -= dmg;
    else
        circle_health[target_id - NUM_SQUARES] -= dmg;
}



</declaration>
	<template>
		<name>Map</name>
		<declaration>bool end;

bool check_end() {
    return (enemy_cont == num_enemy || mainTowerHP == 0);
}
</declaration>
		<location id="id0" x="-646" y="-187">
			<name x="-656" y="-221">Idle</name>
		</location>
		<location id="id1" x="-459" y="-187">
			<name x="-469" y="-221">GameOver</name>
		</location>
		<location id="id2" x="-799" y="-187">
			<committed/>
		</location>
		<location id="id3" x="-739" y="42">
			<committed/>
		</location>
		<init ref="id0"/>
		<transition id="id4">
			<source ref="id3"/>
			<target ref="id1"/>
			<label kind="guard" x="-501" y="-85">end</label>
			<label kind="synchronisation" x="-527" y="-51">end_all!</label>
			<nail x="-476" y="-42"/>
		</transition>
		<transition id="id5">
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="guard" x="-612" y="-102">!end</label>
			<nail x="-578" y="-59"/>
		</transition>
		<transition id="id6">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-756" y="-76">enemy_leave?</label>
			<label kind="assignment" x="-782" y="-51">end := check_end()</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-824" y="-127">turret_notify!</label>
			<nail x="-731" y="-127"/>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-765" y="-204">movement?</label>
		</transition>
		<transition id="id9">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-671" y="-323">attack?</label>
			<nail x="-731" y="-305"/>
			<nail x="-561" y="-305"/>
		</transition>
	</template>
	<template>
		<name>EnemySquare</name>
		<parameter>int id</parameter>
		<declaration>clock t;
int x = 0;
int y = 0;
int health;
int prev_x = -1;
int prev_y = -1;
bool bifurcation;
bool ReachMainTower = false;

int next[2][2] = {
    {-1, -1},
    {-1, -1}
}; // Array of possible next [x,y] positions


void updatePositions(){
    sqrs_pos[id][0] = x;
    sqrs_pos[id][1] = y;
}


void initializePositions(){
    sqrs_pos[id][0] = 0;
    sqrs_pos[id][1] = 0;
}



// Returns possible next positions from (x,y)
void getNextPositions(int x, int y, int prev_x, int prev_y) {
    
    next[0][0] = -1;
    next[0][1] = -1;
    next[1][0] = -1;
    next[1][1] = -1;
    bifurcation = false;
     
    // Main Tower reached - no further movement
    if(x == MAIN_X &amp;&amp; y == MAIN_Y) {
        return;
    }
    
    // Bifurcation point 1
    if(x == BIFURCATION1_X &amp;&amp; y == BIFURCATION1_Y) {
        // Move up
        next[0][0] = x;
        next[0][1] = y+1;
         // Move down
        next[1][0] = x;
        next[1][1] = y-1;
        bifurcation = true;
        return;
    }
    
    // Bifurcation point 2
    if(x == BIFURCATION2_X &amp;&amp; y == BIFURCATION2_Y) {
        // Move down
        next[0][0] = x;
        next[0][1] = y-1;
        // Move right
        next[1][0] = x+1;
        next[1][1] = y;
        bifurcation = true;
        return;
    }
    
    // Horizontal movement
    if (x+1 != prev_x || y != prev_y){
        if (x &lt; WIDTH - 1 &amp;&amp; map[y][x + 1] == PATH) {
            next[0][0] = x + 1;
            next[0][1] = y;
            return;
        }
    }
    // Vertical movement
    if (y &lt; HEIGHT - 1 &amp;&amp; map[y + 1][x] == PATH &amp;&amp; !(x == prev_x &amp;&amp; y+1 == prev_y)) {
        next[0][0] = x;
        next[0][1] = y + 1;
        return;
    }
    if (y &gt; 0 &amp;&amp; map[y - 1][x] == PATH &amp;&amp; !(x == prev_x &amp;&amp; y-1 == prev_y)) {
        next[0][0] = x;
        next[0][1] = y - 1;
        return;
    }
    // Edge case handling
    return ;
}</declaration>
		<location id="id10" x="-2031" y="-1181">
			<name x="-2048" y="-1215">Spawn</name>
			<label kind="invariant" x="-2091" y="-1164">t&lt;=SQUARE_SPAWN_INTERVAL*(id+1)</label>
		</location>
		<location id="id11" x="-884" y="-739">
			<name x="-894" y="-773">Decide</name>
			<urgent/>
		</location>
		<location id="id12" x="-212" y="-739">
			<name x="-222" y="-773">Attack</name>
			<label kind="exponentialrate" x="-222" y="-705">SQUARE_SPEED : 10</label>
		</location>
		<location id="id13" x="-552" y="-739">
			<name x="-562" y="-773">Leave</name>
		</location>
		<location id="id14" x="-1487" y="-739">
			<name x="-1538" y="-773">Move_bifurcation</name>
			<label kind="exponentialrate" x="-1497" y="-705">SQUARE_SPEED : 10</label>
			<label kind="testcodeEnter">getNextPositions(x, y);</label>
		</location>
		<location id="id15" x="-1487" y="-1181">
			<urgent/>
		</location>
		<location id="id16" x="-884" y="-1181">
			<name x="-894" y="-1215">Move</name>
			<label kind="exponentialrate" x="-894" y="-1147">SQUARE_SPEED : 10</label>
		</location>
		<location id="id17" x="-221" y="-1436">
			<label kind="exponentialrate" x="-231" y="-1402">SQUARE_SPEED : 10</label>
		</location>
		<init ref="id10"/>
		<transition id="id18">
			<source ref="id17"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-323" y="-1079">end_all?</label>
			<nail x="-340" y="-824"/>
		</transition>
		<transition id="id19">
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-714" y="-1164">end_all?</label>
			<nail x="-629" y="-1130"/>
		</transition>
		<transition id="id20">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-1428" y="-629">end_all?</label>
			<nail x="-1292" y="-459"/>
			<nail x="-612" y="-459"/>
		</transition>
		<transition id="id21">
			<source ref="id15"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-1207" y="-1122">end_all?</label>
			<nail x="-977" y="-1062"/>
		</transition>
		<transition id="id22">
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-866" y="-565">end_all?</label>
			<nail x="-884" y="-544"/>
			<nail x="-629" y="-552"/>
		</transition>
		<transition id="id23">
			<source ref="id17"/>
			<target ref="id13"/>
			<label kind="guard" x="-544" y="-1326">square_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="-544" y="-1215">enemy_leave!</label>
			<label kind="assignment" x="-544" y="-1292">square_alive[id] := false,
health := square_health[id],
enemy_cont++,
t := 0</label>
			<nail x="-374" y="-1326"/>
			<nail x="-374" y="-918"/>
		</transition>
		<transition id="id24">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-1469" y="-450">square_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="-1470" y="-467">enemy_leave!</label>
			<label kind="assignment" x="-1470" y="-416">square_alive[id] := false,
health := square_health[id],
enemy_cont++,
t := 0</label>
			<nail x="-1487" y="-416"/>
			<nail x="-552" y="-416"/>
		</transition>
		<transition id="id25">
			<source ref="id16"/>
			<target ref="id13"/>
			<label kind="guard" x="-595" y="-1096">square_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="-595" y="-986">enemy_leave!</label>
			<label kind="assignment" x="-595" y="-1071">square_alive[id] := false,
health := square_health[id],
enemy_cont++,
t := 0</label>
			<nail x="-552" y="-1181"/>
		</transition>
		<transition id="id26">
			<source ref="id15"/>
			<target ref="id17"/>
			<label kind="guard" x="-1615" y="-1351">next[0][0] == MAIN_X &amp;&amp; next[0][1] == MAIN_Y</label>
			<nail x="-1487" y="-1436"/>
		</transition>
		<transition id="id27">
			<source ref="id16"/>
			<target ref="id11"/>
			<label kind="guard" x="-875" y="-1130">t &gt;= SQUARE_SPEED &amp;&amp;
next[0][0] != -1 &amp;&amp; 
next[0][1] != -1 &amp;&amp;
square_health[id] &gt; 0</label>
			<label kind="synchronisation" x="-875" y="-884">movement!</label>
			<label kind="assignment" x="-875" y="-1045">prev_x = x, 
prev_y = y,
x = next[0][0], 
y = next[0][1],
updatePositions(),
health := square_health[id],
t := 0</label>
		</transition>
		<transition id="id28">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-1530" y="-969">bifurcation</label>
			<label kind="assignment" x="-1530" y="-952">health := square_health[id]</label>
		</transition>
		<transition id="id29">
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-1428" y="-1207">!bifurcation &amp;&amp; (next[0][0] != MAIN_X || next[0][1] != MAIN_Y)</label>
			<label kind="assignment" x="-1419" y="-1181">health := square_health[id]</label>
		</transition>
		<transition id="id30">
			<source ref="id11"/>
			<target ref="id13"/>
			<label kind="guard" x="-850" y="-739">square_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="-858" y="-629">enemy_leave!</label>
			<label kind="assignment" x="-858" y="-714">square_alive[id] := false,
health := square_health[id],
enemy_cont++,
t := 0</label>
		</transition>
		<transition id="id31">
			<source ref="id11"/>
			<target ref="id15"/>
			<label kind="guard" x="-1275" y="-1037">square_health[id] &gt; 0</label>
			<label kind="assignment" x="-1266" y="-1020">getNextPositions(x, y, prev_x, prev_y),
health := square_health[id],
t:=0</label>
		</transition>
		<transition id="id32">
			<source ref="id14"/>
			<target ref="id11"/>
			<label kind="select" x="-1275" y="-731">i : int[0,1]</label>
			<label kind="guard" x="-1275" y="-714">t &gt;= SQUARE_SPEED &amp;&amp;
next[i][0] != -1 &amp;&amp; 
next[i][1] != -1 &amp;&amp; square_health[id] &gt; 0</label>
			<label kind="synchronisation" x="-1275" y="-493">movement!</label>
			<label kind="assignment" x="-1275" y="-654">prev_x = x, 
prev_y = y,
x = next[i][0], 
y = next[i][1],
updatePositions(),
health := square_health[id],
t := 0</label>
		</transition>
		<transition id="id33">
			<source ref="id10"/>
			<target ref="id15"/>
			<label kind="guard" x="-1844" y="-1164">t &gt;= SQUARE_SPAWN_INTERVAL * (id+1)</label>
			<label kind="assignment" x="-1844" y="-1139">t := 0, 
initializePositions(),
activation_order[id] := activation_counter,
activation_counter++,
square_alive[id] := true, 
square_health[id] := SQUARE_HEALTH,
health := square_health[id],
getNextPositions(x, y, prev_x, prev_y)</label>
		</transition>
		<transition id="id34">
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="guard" x="-527" y="-731">t &gt;= SQUARE_SPEED</label>
			<label kind="synchronisation" x="-527" y="-629">enemy_leave!</label>
			<label kind="assignment" x="-527" y="-705">square_alive[id] := false,
health := 0,
enemy_cont++,
t := 0</label>
		</transition>
		<transition id="id35">
			<source ref="id17"/>
			<target ref="id12"/>
			<label kind="guard" x="-204" y="-1343">t &gt;= SQUARE_SPEED &amp;&amp; square_health[id] &gt; 0</label>
			<label kind="synchronisation" x="-204" y="-1164">attack!</label>
			<label kind="assignment" x="-204" y="-1317">prev_x = x,
prev_y = y,
x = next[0][0],
y = next[0][1],
updatePositions(),
mainTowerHP = mainTowerHP-SQUARE_DAMAGE,
ReachMainTower = true,
t := 0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">EnemyCircle</name>
		<parameter>int id</parameter>
		<declaration>// Place local declarations here.
clock t;
int x = 0;
int y = 0;
int health;
int prev_x = -1;
int prev_y = -1;
bool bifurcation;
bool ReachMainTower = false;

int next[2][2] = {
    {-1, -1},
    {-1, -1}
}; // Array of possible next [x,y] positions

void updatePositions(){
    circles_pos[id][0] = x;
    circles_pos[id][1] = y;
}

void initializePositions(){
    circles_pos[id][0] = 0;
    circles_pos[id][1] = 0;
}

// Returns possible next positions from (x,y)
void getNextPositions(int x, int y, int prev_x, int prev_y) {
    
    next[0][0] = -1;
    next[0][1] = -1;
    next[1][0] = -1;
    next[1][1] = -1;
    bifurcation = false;
     
    // Main Tower reached - no further movement
    if(x == MAIN_X &amp;&amp; y == MAIN_Y) {
        return;
    }
    
    // Bifurcation point 1
    if(x == BIFURCATION1_X &amp;&amp; y == BIFURCATION1_Y) {
        // Move up
        next[0][0] = x;
        next[0][1] = y+1;
         // Move down
        next[1][0] = x;
        next[1][1] = y-1;
        bifurcation = true;
        return;
    }
    
    // Bifurcation point 2
    if(x == BIFURCATION2_X &amp;&amp; y == BIFURCATION2_Y) {
        // Move down
        next[0][0] = x;
        next[0][1] = y-1;
        // Move right
        next[1][0] = x+1;
        next[1][1] = y;
        bifurcation = true;
        return;
    }
    
    // Default forward movement
    if (x+1 != prev_x || y != prev_y){
        if (x &lt; WIDTH - 1 &amp;&amp; map[y][x + 1] == PATH) {
            next[0][0] = x + 1;
            next[0][1] = y;
            return;
        }
    }
    // Vertical movement
    if (y &lt; HEIGHT - 1 &amp;&amp; map[y + 1][x] == PATH &amp;&amp; !(x == prev_x &amp;&amp; y+1 == prev_y)) {
        next[0][0] = x;
        next[0][1] = y + 1;
        return;
    }
    if (y &gt; 0 &amp;&amp; map[y - 1][x] == PATH &amp;&amp; !(x == prev_x &amp;&amp; y-1 == prev_y)) {
        next[0][0] = x;
        next[0][1] = y - 1;
        return;
    }
    // Edge case handling
    return ;
}</declaration>
		<location id="id36" x="-1351" y="-323">
			<name x="-1361" y="-357">Spawn</name>
			<label kind="invariant" x="-1445" y="-306">t&lt;=SQUARE_SPAWN_INTERVAL*(id+1)</label>
		</location>
		<location id="id37" x="8" y="194">
			<name x="-2" y="160">decide</name>
			<urgent/>
		</location>
		<location id="id38" x="739" y="195">
			<name x="729" y="161">Attack</name>
			<label kind="exponentialrate" x="729" y="229">CIRCLE_SPEED : 10</label>
		</location>
		<location id="id39" x="348" y="195">
			<name x="338" y="161">Leave</name>
		</location>
		<location id="id40" x="-790" y="194">
			<name x="-935" y="161">Move_bifurcation</name>
			<label kind="exponentialrate" x="-800" y="228">CIRCLE_SPEED : 10</label>
		</location>
		<location id="id41" x="-790" y="-323">
			<urgent/>
		</location>
		<location id="id42" x="8" y="-323">
			<name x="-2" y="-357">Move</name>
			<label kind="exponentialrate" x="-2" y="-289">CIRCLE_SPEED : 10</label>
		</location>
		<location id="id43" x="731" y="-578">
			<label kind="exponentialrate" x="721" y="-544">CIRCLE_SPEED : 10</label>
		</location>
		<init ref="id36"/>
		<transition id="id44">
			<source ref="id41"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-612" y="-297">end_all?</label>
			<nail x="-51" y="-187"/>
			<nail x="-8" y="93"/>
		</transition>
		<transition id="id45">
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="-680" y="280">end_all?</label>
			<nail x="-467" y="442"/>
			<nail x="314" y="433"/>
		</transition>
		<transition id="id46">
			<source ref="id37"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="26" y="331">end_all?</label>
			<nail x="8" y="348"/>
			<nail x="289" y="348"/>
		</transition>
		<transition id="id47">
			<source ref="id42"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="51" y="-289">end_all?</label>
			<nail x="246" y="-212"/>
		</transition>
		<transition id="id48">
			<source ref="id43"/>
			<target ref="id39"/>
			<label kind="synchronisation" x="544" y="68">end_all?</label>
			<nail x="603" y="59"/>
		</transition>
		<transition id="id49">
			<source ref="id43"/>
			<target ref="id39"/>
			<label kind="guard" x="408" y="-229">circle_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="408" y="-127">enemy_leave!</label>
			<label kind="assignment" x="408" y="-204">circle_alive[id] := false,
health := circle_health[id],
enemy_cont++,
t := 0</label>
		</transition>
		<transition id="id50">
			<source ref="id42"/>
			<target ref="id39"/>
			<label kind="guard" x="323" y="-68">circle_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="323" y="42">enemy_leave!</label>
			<label kind="assignment" x="323" y="-42">circle_alive[id] := false,
health := circle_health[id],
enemy_cont++,
t := 0</label>
			<nail x="348" y="-323"/>
		</transition>
		<transition id="id51">
			<source ref="id40"/>
			<target ref="id39"/>
			<label kind="guard" x="-772" y="425">circle_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="-773" y="408">enemy_leave!</label>
			<label kind="assignment" x="-772" y="459">circle_alive[id] := false,
health := circle_health[id],
enemy_cont++,
t := 0</label>
			<nail x="-790" y="459"/>
			<nail x="348" y="459"/>
		</transition>
		<transition id="id52">
			<source ref="id41"/>
			<target ref="id43"/>
			<label kind="guard" x="-772" y="-612">next[0][0] == MAIN_X &amp;&amp; next[0][1] == MAIN_Y</label>
			<nail x="-790" y="-578"/>
		</transition>
		<transition id="id53">
			<source ref="id42"/>
			<target ref="id37"/>
			<label kind="guard" x="17" y="-221">t &gt;= CIRCLE_SPEED &amp;&amp;
next[0][0] != -1 &amp;&amp; 
next[0][1] != -1 &amp;&amp; 
circle_health[id] &gt; 0</label>
			<label kind="synchronisation" x="17" y="25">movement!</label>
			<label kind="assignment" x="17" y="-119">prev_x = x, 
prev_y = y,
x = next[0][0], 
y = next[0][1],
updatePositions(),
health := circle_health[id],
t := 0</label>
		</transition>
		<transition id="id54">
			<source ref="id41"/>
			<target ref="id42"/>
			<label kind="guard" x="-731" y="-340">!bifurcation &amp;&amp; (next[0][0] != MAIN_X || next[0][1] != MAIN_Y)</label>
			<label kind="assignment" x="-731" y="-323">health := circle_health[id]</label>
		</transition>
		<transition id="id55">
			<source ref="id41"/>
			<target ref="id40"/>
			<label kind="guard" x="-790" y="-93">bifurcation</label>
			<label kind="assignment" x="-790" y="-64">health := circle_health[id]</label>
		</transition>
		<transition id="id56">
			<source ref="id37"/>
			<target ref="id39"/>
			<label kind="guard" x="59" y="204">circle_health[id] &lt;= 0</label>
			<label kind="synchronisation" x="59" y="306">enemy_leave!</label>
			<label kind="assignment" x="59" y="221">circle_alive[id] := false,
health := circle_health[id],
enemy_cont++,
t := 0</label>
		</transition>
		<transition id="id57">
			<source ref="id37"/>
			<target ref="id41"/>
			<label kind="guard" x="-399" y="-187">circle_health[id] &gt; 0</label>
			<label kind="assignment" x="-408" y="-161">getNextPositions(x, y, prev_x, prev_y),
health := circle_health[id],
t:=0</label>
		</transition>
		<transition id="id58">
			<source ref="id40"/>
			<target ref="id37"/>
			<label kind="select" x="-459" y="195">i : int[0,1]</label>
			<label kind="guard" x="-459" y="220">t &gt;= CIRCLE_SPEED &amp;&amp;
next[i][0] != -1 &amp;&amp; 
next[i][1] != -1 &amp;&amp; circle_health[id] &gt; 0</label>
			<label kind="synchronisation" x="-459" y="170">movement!</label>
			<label kind="assignment" x="-459" y="280">prev_x = x, 
prev_y = y,
x = next[i][0], 
y = next[i][1],
updatePositions(),
health := circle_health[id],
t := 0</label>
		</transition>
		<transition id="id59">
			<source ref="id36"/>
			<target ref="id41"/>
			<label kind="guard" x="-1190" y="-324">t &gt;= CIRCLE_SPAWN_INTERVAL * (id+1)</label>
			<label kind="assignment" x="-1190" y="-297">t := 0, 
initializePositions(),
activation_order[id + NUM_SQUARES] := activation_counter,
activation_counter++,
circle_alive[id] := true, 
circle_health[id] := CIRCLE_HEALTH,
health := circle_health[id],
getNextPositions(x, y, prev_x, prev_y)</label>
		</transition>
		<transition id="id60">
			<source ref="id38"/>
			<target ref="id39"/>
			<label kind="guard" x="459" y="204">t &gt;= CIRCLE_SPEED</label>
			<label kind="synchronisation" x="459" y="306">enemy_leave!</label>
			<label kind="assignment" x="459" y="229">circle_alive[id] := false,
health := 0,
enemy_cont++,
t := 0</label>
		</transition>
		<transition id="id61">
			<source ref="id43"/>
			<target ref="id38"/>
			<label kind="guard" x="748" y="-374">t &gt;= CIRCLE_SPEED &amp;&amp; circle_health[id] &gt; 0</label>
			<label kind="synchronisation" x="748" y="-187">attack!</label>
			<label kind="assignment" x="748" y="-348">prev_x = x,
prev_y = y,
x = next[0][0],
y = next[0][1],
updatePositions(),
mainTowerHP := mainTowerHP - CIRCLE_DAMAGE, 
ReachMainTower = true,
t := 0</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Turret</name>
		<parameter>int &amp;range, int &amp;rof, int &amp;atk, int x, int y, int id</parameter>
		<declaration>int[0, NUM_SQUARES+NUM_CIRCLES-1] target_id;
int local_value;
bool present;
clock turret_clock;
bool shooted;

//local functions
/*bool find_target(int range, int rof, int x, int y){
    bool found= false;
    int r;
    int i;
    int j;
    int current_id = -1;
    int current_time;
    int best_id = -1;
    int best_time;

    r = 1;

    while (r &lt;= range &amp;&amp; !found) {
        // Left and right columns
        for (j = y-r; j &lt;= y+r; j++){
            if(x-r &gt;= 0 &amp;&amp; j&gt;=0 &amp;&amp; j &lt; WIDTH){
                    i = x-r;
                    //if the coordinate is a path
                    if(map[i][j] == PATH){
                        current_id = id_inMap[i][j];
                        //if there is an enemy --&gt; different from -1
                        //and if the enemy is alive (health of the enemy is greater than 0)
                        if(current_id != -1 &amp;&amp; ((current_id &lt; NUM_SQUARES &amp;&amp; square_health[current_id] &gt; 0) || (current_id &gt;= NUM_SQUARES &amp;&amp; circle_health[current_id - NUM_SQUARES] &gt; 0))){
                            current_time = activation_order[current_id];
                            if(!found || current_time &lt; best_time || (current_time == best_time &amp;&amp; current_id &gt;= 0 &amp;&amp; current_id &lt;= (NUM_SQUARES-1) &amp;&amp; !(best_id &gt;= 0 &amp;&amp; best_id &lt;= (NUM_SQUARES-1)))){
                                found = true;
                                best_id = current_id;
                                best_time = current_time;
                        }
                    }
                    
                }                        
            }
             
            if(x+r &lt; WIDTH &amp;&amp; j&gt;=0 &amp;&amp; j &lt; HEIGHT){
                i = x+r;
                //if the coordinate is a path
                if(map[i][j] == PATH){
                    current_id = id_inMap[i][j];
                    //if there is an enemy --&gt; different from -1
                    //and if the enemy is alive (health of the enemy is greater than 0)
                    if(current_id != -1 &amp;&amp; ((current_id &lt; NUM_SQUARES &amp;&amp; square_health[current_id] &gt; 0) || (current_id &gt;= NUM_SQUARES &amp;&amp; circle_health[current_id - NUM_SQUARES] &gt; 0))){
                        current_time = activation_order[current_id];
                        if(!found || current_time &lt; best_time || (current_time == best_time &amp;&amp; current_id &gt;= 0 &amp;&amp; current_id &lt;= (NUM_SQUARES-1) &amp;&amp; !(best_id &gt;= 0 &amp;&amp; best_id &lt;= (NUM_SQUARES-1)))){
                            found = true;
                            best_id = current_id;
                            best_time = current_time;
                        }
                    }
                    
                } 
            }
                
        }

    // Top and bottom rows (excluding corners)
    for(i = x-r+1; i &lt;= x+r-1; i++){
			if(i &gt;= 0 &amp;&amp; i &lt; WIDTH){
                //top
				if( y-r &gt;=0){
                    j = y-r;
                    //if the coordinate is a path
                    if(map[i][j] == PATH){
                        current_id = id_inMap[i][j];
                       //if there is an enemy --&gt; different from -1
                       //and if the enemy is alive (health of the enemy is greater than 0)
                       if(current_id != -1 &amp;&amp; ((current_id &lt; NUM_SQUARES &amp;&amp; square_health[current_id] &gt; 0) || (current_id &gt;= NUM_SQUARES &amp;&amp; circle_health[current_id - NUM_SQUARES] &gt; 0))){
                            current_time = activation_order[current_id];
                            if(!found || current_time &lt; best_time || (current_time == best_time &amp;&amp; current_id &gt;= 0 &amp;&amp; current_id &lt;= (NUM_SQUARES-1) &amp;&amp; !(best_id &gt;= 0 &amp;&amp; best_id &lt;= (NUM_SQUARES-1)))){
                                found = true;
                                best_id = current_id;
                                best_time = current_time;
                            }
                        }
                    
                    }   
                }
                //bottom
				if(y+r &lt; HEIGHT){
                    j = y+r;
                    //if the coordinate is a path
                    if(map[i][j] == PATH){
                        current_id = id_inMap[i][j];
                        //if there is an enemy --&gt; different from -1
                        //and if the enemy is alive (health of the enemy is greater than 0)
                        if(current_id != -1 &amp;&amp; ((current_id &lt; NUM_SQUARES &amp;&amp; square_health[current_id] &gt; 0) || (current_id &gt;= NUM_SQUARES &amp;&amp; circle_health[current_id - NUM_SQUARES] &gt; 0))){
                            current_time = activation_order[current_id];
                            if(!found || current_time &lt; best_time || (current_time == best_time &amp;&amp; current_id &gt;= 0 &amp;&amp; current_id &lt;= (NUM_SQUARES-1) &amp;&amp; !(best_id &gt;= 0 &amp;&amp; best_id &lt;= (NUM_SQUARES-1)))){
                                found = true;
                                best_id = current_id;
                                best_time = current_time;
                            }
                        }                   
                    }
                }					
			}
		}

        if (found) {
            output_id = best_id;
        } else {
            r++;
        }
    }
    return found;
}*/

int abs_val(int v) {
    return (v &lt; 0) ? -v : v;
}

int chebyshev_distance(int x, int y, int tur_x, int tur_y) {
    int dx = abs_val(x - tur_x);
    int dy = abs_val(y - tur_y);
    return (dx &gt; dy) ? dx : dy;
}


bool find_target(int r, int rof, int x, int y){
    //scroll through square
    //scroll through circle
    bool found, square;
    int i,j;
    int min_distance, current_distance;
    int min_id; 
    int min_time;
    int current_time;
    
    square = false;
    
    for (i = 0; i &lt; NUM_SQUARES; i++){
        if(sqrs_pos[i][0] &gt; -1 &amp;&amp; sqrs_pos[i][1] &gt; -1 &amp;&amp; square_health[i] &gt;0){
            if (abs_val(sqrs_pos[i][0] - x) &lt;= r &amp;&amp; abs_val(sqrs_pos[i][1] - y) &lt;= r) {
                // within Chebyshev range
                
                current_distance = chebyshev_distance(sqrs_pos[i][0], sqrs_pos[i][1], x, y);
                if (!found){
                    found = true;
                    square = true;
                    min_distance = current_distance;
                    min_id = i;
                    min_time = activation_order[i];
                } else {
                    if(current_distance &lt; min_distance){
                        min_distance = current_distance;
                        min_id = i;
                        min_time = activation_order[i];
                    } else if(current_distance == min_distance){
                        current_time = activation_order[i];
                        if(current_time &gt; min_time){
                            min_distance = current_distance;
                            min_id = i;
                            min_time = activation_order[i];
                        }
                    }
                }
            }
        }
    }
    
    for (j=0; j &lt; NUM_CIRCLES; j++){
        if(circles_pos[j][0] &gt; -1 &amp;&amp; circles_pos[j][1] &gt; -1 &amp;&amp; circle_health[j] &gt; 0){
            if (abs_val(circles_pos[j][0] - x) &lt;= r &amp;&amp; abs_val(circles_pos[j][1] - y) &lt;= r) {
                // within Chebyshev range
                current_distance = chebyshev_distance(circles_pos[j][0], circles_pos[j][1], x, y);
                if (!found){
                    found = true;             
                    min_distance = current_distance;
                    min_id = j;
                    min_time = activation_order[j+NUM_SQUARES];
                } else {
                    if(current_distance &lt; min_distance){
                        square = false;
                        min_distance = current_distance;
                        min_id = j;
                        min_time = activation_order[j+NUM_SQUARES];
                    } else if(current_distance == min_distance){
                        if(!square){
                            current_time = activation_order[j+NUM_SQUARES];
                            if(current_time &gt; min_time){
                                min_distance = current_distance;
                                min_id = j;
                                min_time = activation_order[j+NUM_SQUARES];
                            }
                        }
                    }
                }
            }
        }
    }

    if(found){
        target_id = (square) ? min_id : min_id + NUM_SQUARES;
    }

    return found;
}
</declaration>
		<location id="id62" x="-3646" y="-1190">
			<name x="-3663" y="-1224">idle</name>
		</location>
		<location id="id63" x="-3060" y="-1190">
			<name x="-3102" y="-1224">ready_to_fire</name>
			<committed/>
		</location>
		<location id="id64" x="-2584" y="-1190">
			<name x="-2610" y="-1224">reload</name>
			<label kind="exponentialrate" x="-2609" y="-1173">1 : rof</label>
		</location>
		<location id="id65" x="-2992" y="-909">
			<name x="-3002" y="-943">End</name>
		</location>
		<init ref="id62"/>
		<transition id="id66">
			<source ref="id62"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-3629" y="-977">end_all?</label>
			<nail x="-3689" y="-986"/>
		</transition>
		<transition id="id67">
			<source ref="id64"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-2873" y="-1028">end_all?</label>
		</transition>
		<transition id="id68">
			<source ref="id63"/>
			<target ref="id65"/>
			<label kind="synchronisation" x="-3051" y="-1037">end_all?</label>
		</transition>
		<transition id="id69">
			<source ref="id64"/>
			<target ref="id62"/>
			<label kind="guard" x="-3629" y="-1334">turret_clock &gt;=rof -1</label>
			<label kind="assignment" x="-3628" y="-1309">shooted := false</label>
			<nail x="-2575" y="-1309"/>
			<nail x="-3646" y="-1309"/>
		</transition>
		<transition id="id70">
			<source ref="id63"/>
			<target ref="id62"/>
			<label kind="guard" x="-3519" y="-1105">!present</label>
			<nail x="-3060" y="-1088"/>
			<nail x="-3646" y="-1088"/>
		</transition>
		<transition id="id71">
			<source ref="id63"/>
			<target ref="id64"/>
			<label kind="guard" x="-2881" y="-1215">present</label>
			<label kind="assignment" x="-2958" y="-1181">apply_damage(target_id, atk),
turret_clock := 0,
shooted := true</label>
		</transition>
		<transition id="id72">
			<source ref="id62"/>
			<target ref="id63"/>
			<label kind="synchronisation" x="-3604" y="-1147">turret_notify?</label>
			<label kind="assignment" x="-3604" y="-1190">present = find_target(range, rof, x, y),
shooted := false</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

M = Map();
T(const id_t id) = Turret(ranges[id], rofs[id], atks[id], locations[id].x, locations[id].y , id);
S(const id_s id) = EnemySquare(id);
C(const id_c id) = EnemyCircle(id);
// List one or more processes to be composed into a system.
system S, C, M, T;</system>
	<queries>
		<query>
			<formula>E&lt;&gt; M.GameOver</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-06-28 12:14:36 +0200">
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; C0.ReachMainTower and S0.ReachMainTower and C1.ReachMainTower  and S1.ReachMainTower and C2.ReachMainTower  and S2.ReachMainTower
</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-06-28 12:07:08 +0200">
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; (globalClock&lt;=LONGEST_PATH*CIRCLE_SPEED+CIRCLE_SPAWN_INTERVAL and C0.Attack) or 
(globalClock&lt;=(LONGEST_PATH*CIRCLE_SPEED+2*CIRCLE_SPAWN_INTERVAL) and C1.Attack) or 
(globalClock&lt;=(LONGEST_PATH*CIRCLE_SPEED+3*CIRCLE_SPAWN_INTERVAL) and C2.Attack)</formula>
			<comment>Property III</comment>
			<result outcome="success" type="quality" timestamp="2025-06-28 12:24:09 +0200">
			</result>
		</query>
		<query>
			<formula>A&lt;&gt; (globalClock&lt;=LONGEST_PATH*SQUARE_SPEED+SQUARE_SPAWN_INTERVAL and S0.Attack) or
(globalClock&lt;=(LONGEST_PATH*SQUARE_SPEED+2*SQUARE_SPAWN_INTERVAL) and S1.Attack) or
(globalClock&lt;=(LONGEST_PATH*SQUARE_SPEED+3*SQUARE_SPAWN_INTERVAL) and S2.Attack)</formula>
			<comment>Property IV</comment>
			<option key="--diagnostic" value="2"/>
			<result outcome="success" type="quality" timestamp="2025-06-28 13:09:00 +0200">
				<option key="--diagnostic" value="2"/>
			</result>
		</query>
		<query>
			<formula>A[] (S0.Spawn or (S0.next[0][0]!=-1 and S0.next[0][1]!=-1)) and
    (S1.Spawn or (S1.next[0][0]!=-1 and S1.next[0][1]!=-1)) and
    (S2.Spawn or (S2.next[0][0]!=-1 and S2.next[0][1]!=-1)) and
    (C0.Spawn or (C0.next[0][0]!=-1 and C0.next[0][1]!=-1)) and
    (C1.Spawn or (C1.next[0][0]!=-1 and C1.next[0][1]!=-1)) and
    (C2.Spawn or (C2.next[0][0]!=-1 and C2.next[0][1]!=-1))</formula>
			<comment>Property V</comment>
			<result outcome="success" type="quality" timestamp="2025-06-28 13:13:51 +0200">
			</result>
		</query>
		<query>
			<formula>E&lt;&gt; mainTowerHP &lt;= 0</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate [&lt;=200; 10] { globalClock, mainTowerHP }</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2025-07-18 18:17:02 +0200">
				<plot title="Simulations (10)" xaxis="time" yaxis="value">
					<series title="globalClock" type="l" color="0xff0000" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff0909" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff1212" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff1b1b" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff2424" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff2d2d" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff3636" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff3e3e" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff4747" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="" type="l" color="0xff5050" encoding="csv">0.0,0.0
200.0,200.0
					</series>
					<series title="mainTowerHP" type="l" color="0x00ffff" encoding="csv">0.0,100.0
165.6153961873964,100.0
165.63465245581463,96.0
181.9161042977135,96.0
181.9271820220424,92.0
185.03349692636507,92.0
185.06709703686826,88.0
186.43393165577302,88.0
186.43393165577302,84.0
186.6638372331591,84.0
186.6638372331591,82.0
187.36730664935382,82.0
187.36730664935382,78.0
188.15804373086308,78.0
188.15804373086308,74.0
191.01884279180157,74.0
191.01884279180157,70.0
192.67069817878019,70.0
192.69202440203605,66.0
196.06978964460208,66.0
196.11777485555214,62.0
200.0,62.0
					</series>
					<series title="" type="l" color="0x09ffff" encoding="csv">0.0,100.0
170.64965466289888,100.0
170.69911161936747,96.0
170.94631765811482,96.0
170.94631765811482,92.0
177.05807797553044,92.0
177.08316653012557,88.0
177.78081280442817,88.0
177.78081280442817,84.0
181.6386068861462,84.0
181.6386068861462,80.0
184.44462878009725,80.0
184.4588647977846,76.0
184.46240870134,72.0
189.17825919014237,72.0
189.22051097395064,68.0
190.48721658229627,68.0
190.48721658229627,64.0
195.7014523997563,64.0
195.7014523997563,60.0
200.0,60.0
					</series>
					<series title="" type="l" color="0x12ffff" encoding="csv">0.0,100.0
161.14468610999683,100.0
161.14468610999683,96.0
182.88837926171755,96.0
182.9015225554911,92.0
185.44547845782384,92.0
185.44547845782384,88.0
190.22084353496766,88.0
190.25689073434478,84.0
194.61550203656242,84.0
194.65761121245762,80.0
196.47752146523902,80.0
196.47752146523902,76.0
196.61929029104635,76.0
196.65815801403946,72.0
200.0,72.0
					</series>
					<series title="" type="l" color="0x1bffff" encoding="csv">0.0,100.0
143.30950688835384,100.0
143.30950688835384,96.0
176.08010072926675,96.0
176.08010072926675,92.0
180.85009022814782,92.0
180.8700640112733,88.0
182.36440485153946,88.0
182.36440485153946,84.0
182.95685525732284,84.0
183.0,80.0
187.16242571164952,80.0
187.1980100286513,76.0
192.22249275883112,76.0
192.22249275883112,72.0
194.31450095824476,72.0
194.31450095824476,68.0
196.80295049700803,68.0
196.8482436555946,64.0
200.0,64.0
					</series>
					<series title="" type="l" color="0x24ffff" encoding="csv">0.0,100.0
152.8061429072076,100.0
152.8061429072076,96.0
163.33013992773172,96.0
163.33013992773172,92.0
168.1531778022491,92.0
168.1632346881291,88.0
184.20467755160084,88.0
184.21279095663567,84.0
200.0,84.0
					</series>
					<series title="" type="l" color="0x2dffff" encoding="csv">0.0,100.0
180.3150741101989,100.0
180.35589403736913,96.0
184.15623850235994,96.0
184.15623850235994,92.0
191.0341668999366,92.0
191.06226377605216,88.0
193.35947648166453,88.0
193.35947648166453,84.0
195.20501021578895,84.0
195.20742536960898,80.0
196.45779573912478,80.0
196.45779573912478,76.0
197.73260863650344,76.0
197.73260863650344,72.0
200.0,72.0
					</series>
					<series title="" type="l" color="0x36ffff" encoding="csv">0.0,100.0
173.76669725708896,100.0
173.78893434993404,96.0
175.86526058507312,96.0
175.86526058507312,92.0
178.28602907368912,92.0
178.33560322767045,88.0
187.34874603557577,88.0
187.36165781889414,84.0
196.03891183148465,84.0
196.0469495359836,80.0
196.30408573193913,80.0
196.30408573193913,76.0
200.0,76.0
					</series>
					<series title="" type="l" color="0x3effff" encoding="csv">0.0,100.0
153.84969184834154,100.0
153.8833783675047,96.0
172.68169052494173,96.0
172.6872415943188,92.0
172.98131523806873,92.0
172.98131523806873,88.0
180.80338147270137,88.0
180.80338147270137,84.0
184.74683857254593,84.0
184.7643698738223,80.0
185.58578204463686,80.0
185.61712647593097,78.0
195.54028511443397,78.0
195.54028511443397,74.0
198.24882186584398,74.0
198.24882186584398,70.0
200.0,70.0
					</series>
					<series title="" type="l" color="0x47ffff" encoding="csv">0.0,100.0
167.47827961948454,100.0
167.51735587805877,96.0
171.0101204166371,96.0
171.05882607274958,92.0
171.91683563516696,92.0
171.94253326436925,88.0
184.73711698764944,88.0
184.76372563916647,84.0
185.17210004141913,84.0
185.17210004141913,80.0
187.6252336211247,80.0
187.65941925698013,76.0
190.33304668191286,76.0
190.3349599502768,72.0
190.58765532668102,72.0
190.58765532668102,68.0
192.62399375886466,68.0
192.62399375886466,64.0
200.0,64.0
					</series>
					<series title="" type="l" color="0x50ffff" encoding="csv">0.0,100.0
168.05015349885338,100.0
168.05015349885338,96.0
181.08987265105168,96.0
181.1200254223257,92.0
187.05043904195438,92.0
187.05043904195438,88.0
200.0,88.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=200] ([] mainTowerHP == 100)</formula>
			<comment/>
			<result outcome="success" type="interval" value="≤ 0.0499441 (95% CI)" timestamp="2025-07-18 18:21:41 +0200">
				<details>≤ 0.0499441 (95% CI)</details>
			</result>
		</query>
	</queries>
</nta>
